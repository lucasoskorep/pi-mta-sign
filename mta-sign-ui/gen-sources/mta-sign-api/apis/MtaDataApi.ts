/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AllStationModel,
  HTTPValidationError,
  Route,
  RouteResponse,
  StationResponse,
} from '../models';
import {
    AllStationModelFromJSON,
    AllStationModelToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    RouteFromJSON,
    RouteToJSON,
    RouteResponseFromJSON,
    RouteResponseToJSON,
    StationResponseFromJSON,
    StationResponseToJSON,
} from '../models';

export interface GetRouteApiMtaStopIdRoutePostRequest {
    stopId: any;
    route: Route;
}

export interface GetStationApiMtaStopIdPostRequest {
    stopId: any;
}

/**
 * 
 */
export class MtaDataApi extends runtime.BaseAPI {

    /**
     * Get All
     */
    async getAllApiMtaPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllStationModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/mta`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllStationModelFromJSON(jsonValue));
    }

    /**
     * Get All
     */
    async getAllApiMtaPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllStationModel> {
        const response = await this.getAllApiMtaPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Route
     */
    async getRouteApiMtaStopIdRoutePostRaw(requestParameters: GetRouteApiMtaStopIdRoutePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RouteResponse>> {
        if (requestParameters.stopId === null || requestParameters.stopId === undefined) {
            throw new runtime.RequiredError('stopId','Required parameter requestParameters.stopId was null or undefined when calling getRouteApiMtaStopIdRoutePost.');
        }

        if (requestParameters.route === null || requestParameters.route === undefined) {
            throw new runtime.RequiredError('route','Required parameter requestParameters.route was null or undefined when calling getRouteApiMtaStopIdRoutePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/mta/{stop_id}/{route}`.replace(`{${"stop_id"}}`, encodeURIComponent(String(requestParameters.stopId))).replace(`{${"route"}}`, encodeURIComponent(String(requestParameters.route))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RouteResponseFromJSON(jsonValue));
    }

    /**
     * Get Route
     */
    async getRouteApiMtaStopIdRoutePost(requestParameters: GetRouteApiMtaStopIdRoutePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RouteResponse> {
        const response = await this.getRouteApiMtaStopIdRoutePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Station
     */
    async getStationApiMtaStopIdPostRaw(requestParameters: GetStationApiMtaStopIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StationResponse>> {
        if (requestParameters.stopId === null || requestParameters.stopId === undefined) {
            throw new runtime.RequiredError('stopId','Required parameter requestParameters.stopId was null or undefined when calling getStationApiMtaStopIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/mta/{stop_id}`.replace(`{${"stop_id"}}`, encodeURIComponent(String(requestParameters.stopId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StationResponseFromJSON(jsonValue));
    }

    /**
     * Get Station
     */
    async getStationApiMtaStopIdPost(requestParameters: GetStationApiMtaStopIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StationResponse> {
        const response = await this.getStationApiMtaStopIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
